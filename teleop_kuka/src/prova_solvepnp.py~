#!/usr/bin/python

#import the necessary modules
import cv2
import numpy as np

objp = np.array([[0, 0, 0],[1, 0, 0],[1, 1, 0],[1, 0, 0]], np.float32)

mtx = np.matrix([[532.80990766, 0.0, 342.49522241],
      [0.0, 532.93344824, 233.88792572],
      [0.0, 0.0, 1.0]], np.float32)

dist =  np.array([ -2.81325825e-01,   2.91151879e-02,   1.21234424e-03,  -1.40823842e-04, 1.54861064e-01], np.float32)



filename = 'square.png'
img = cv2.imread(filename)
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
blur = cv2.GaussianBlur(gray,(5,5),0)
edges = cv2.Canny(blur,100,200)
cv2.imshow('vvvvv', edges)
ret,thresh = cv2.threshold(edges,127,255,0)
contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
cnt = contours[0]
epsilon = 0.1 * cv2.arcLength(cnt, True)
approx = cv2.approxPolyDP(cnt, epsilon, True)
approx = np.array(approx, np.float32)

# Find the rotation and translation vectors.
rvecs, tvecs, inliers = cv2.solvePnPRansac(objp, approx, mtx, dist)
#print(rvecs, tvecs)

imgpts, jac = cv2.projectPoints(objp, rvecs, tvecs, mtx, dist)
print(imgpts)
print(approx)
corner = tuple(approx[0].ravel())
cv2.line(img, corner, tuple(imgpts[0].ravel()), (255,0,0), 15)
#cv2.line(img, corner, tuple(imgpts[1].ravel()), (0,255,0), 5)
#cv2.line(img, corner, tuple(imgpts[2].ravel()), (0,0,255), 5)

cv2.imshow('3d tf', img)

if cv2.waitKey(0) & 0xff == 27:
    cv2.destroyAllWindows()
