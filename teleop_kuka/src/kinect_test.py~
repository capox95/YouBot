#!/usr/bin/python

import rospy
import sys
import cv2
import cv2.cv as cv
from sensor_msgs.msg import Image, CompressedImage, CameraInfo, PointCloud2
from cv_bridge import CvBridge, CvBridgeError
import numpy as np
import imutils
from roslib import message
import sensor_msgs.point_cloud2 as pc2

blueLower = (110, 50, 50)
blueUpper = (130, 255, 255)

class cvBridgeDemo():
    def __init__(self):
        self.node_name = "cv_bridge_demo"
        
        rospy.init_node(self.node_name)
        rospy.on_shutdown(self.cleanup)
        
        self.cv_window_name = self.node_name
        cv.NamedWindow(self.cv_window_name, cv.CV_WINDOW_NORMAL)
        cv.MoveWindow(self.cv_window_name, 25, 75)


	# And one for the depth image
        cv.NamedWindow("Depth Image", cv.CV_WINDOW_NORMAL)
	cv.MoveWindow("Depth Image", 25, 350)
        
        self.bridge = CvBridge()
        
        self.image_sub = rospy.Subscriber("/kinect/rgbimage/image_raw", Image, self.image_callback)
        self.image_sub = rospy.Subscriber("/kinect/depthimage/image_raw", Image, self.depth_callback)

        rospy.loginfo("Waiting for image topics...")

    def image_callback(self, ros_image):
        # Use cv_bridge() to convert the ROS image to OpenCV format
        try:
            frame = self.bridge.imgmsg_to_cv2(ros_image, "bgr8")
        except CvBridgeError, e:
            print e
        
        # Convert the image to a Numpy array since most cv2 functions
        # require Numpy arrays.
        frame = np.array(frame, dtype=np.uint8)
        
        # Process the frame using the process_image() function
        display_image = self.process_image(frame)
                       
        # Display the image.
        cv2.imshow(self.node_name, display_image)
        
        # Process any keyboard commands
        self.keystroke = cv.WaitKey(5)
        if 32 <= self.keystroke and self.keystroke < 128:
            cc = chr(self.keystroke).lower()
            if cc == 'q':
                # The user has press the q key, so exit
                rospy.signal_shutdown("User hit q key to quit.")
                
            
    def process_image(self, frame):
    	 frame = imutils.resize(frame, width=600)
         hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

   	 mask = cv2.inRange(hsv, blueLower, blueUpper)
         mask = cv2.erode(mask, None, iterations=2)
   	 mask = cv2.dilate(mask, None, iterations=2)

   	 # (x, y) center of the ball
    	 cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
         	 cv2.CHAIN_APPROX_SIMPLE)[-2]
    	 center = None

	 # only proceed if at least one contour was found
    	 if len(cnts) > 0:
		# find the largest contour in the mask, then use
		# it to compute the minimum enclosing circle and
		# centroid
		c = max(cnts, key=cv2.contourArea)
		((x, y), radius) = cv2.minEnclosingCircle(c)
		M = cv2.moments(c)
		center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))

		# only proceed if the radius meets a minimum size
		if radius > 10:
			# draw the circle and centroid on the frame,
			# then update the list of tracked points
			cv2.circle(frame, (int(x), int(y)), int(radius),
				(0, 255, 255), 2)
			cv2.circle(frame, center, 5, (0, 0, 255), -1)        

        
         return frame
    

    def depth_callback(self, ros_image):
        # Use cv_bridge() to convert the ROS image to OpenCV format
	try:
           	# The depth image is a single-channel float32 image
		depth_image = self.bridge.imgmsg_to_cv2(ros_image, "passthrough")
        except CvBridgeError, e:
            	print e


      

       	# Process the depth image
        depth_display_image = self.process_depth_image(depth_image)
    
        # Display the result
	cv2.imshow("Depth Image", depth_image)


    def process_depth_image(self, frame):

	return frame

    
    def cleanup(self):
        print "Shutting down vision node."
        cv2.destroyAllWindows()   
    
def main(args):       
    try:
        cvBridgeDemo()
        rospy.spin()
    except KeyboardInterrupt:
        print "Shutting down vision node."
        cv.DestroyAllWindows()

if __name__ == '__main__':
	main(sys.argv)
