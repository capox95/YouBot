#!/usr/bin/env python
# import roslib; roslib.load_manifest('teleop_arm_ds4')
import rospy
from sensor_msgs.msg import JointState, Joy
from brics_actuator.msg import JointPositions, JointValue, JointVelocities
import sys
import copy
import numpy


class arm_teleop:

    def __init__(self):
        rospy.init_node('test')
        rospy.Subscriber("joint_states", JointState, self.processJoints)
        rospy.Subscriber('/joy', Joy, self.processJoystick)
        self.velPub = rospy.Publisher('/gripper_controller/velocity_command', JointVelocities, queue_size=10)
        self.gripPub = rospy.Publisher('/gripper_controller/position_command', JointPositions, queue_size=10)

        self.joyMsg = None

        self.crntJointStates = JointState()
        self.crntJointPositions = JointPositions()
        self.gripperPositions = JointPositions()
        self.angularStep = 0.07
        self.maxVel = 1.0
        self.gripStep = 0.001
        self.previous_vel_change = False


        
    def processJoints(self, joint_states):
        
            pos = JointValue()
            pos.joint_uri = "gripper_finger_joint_l"
            pos.unit = "m"
            pos.value = joint_states.position[15]
            self.gripperPositions.positions.append(pos)

            pos = JointValue()
            pos.joint_uri = "gripper_finger_joint_r"
            pos.unit = "m"
            pos.value = joint_states.position[16]
            self.gripperPositions.positions.append(pos)
            
            desiredGripPos = copy.deepcopy(self.gripperPositions)

            self.joyMsg.axes = numpy.array(self.joyMsg.axes)	    
            left_axis = self.joyMsg.axes[[0, 1]]
            right_axis = self.joyMsg.axes[[2, 3]]
            l2_axis = self.joyMsg.axes[12] * -1
            r2_axis = self.joyMsg.axes[13] * -1
	    square = self.joyMsg.buttons[15]
	    x = self.joyMsg.buttons[14]
	    circle = self.joyMsg.buttons[13]
            triangle = self.joyMsg.buttons[12]
	    r1 = self.joyMsg.buttons[11]
	    l1 = self.joyMsg.buttons[10]
	    r2 = self.joyMsg.buttons[9]
	    l2 = self.joyMsg.buttons[8]
            left_dpad = self.joyMsg.axes[6] == 1
            right_dpad = self.joyMsg.axes[6] == -1
            up_dpad = self.joyMsg.axes[7] == 1
            down_dpad = self.joyMsg.axes[7] == -1

          

            # object that will carry all desired velocities to each joint
            desiredVel = JointVelocities()
	    # desiredGripPos = JointPositions()



            vel = JointValue()
            vel.joint_uri = "gripper_finger_joint_l"
            vel.unit = "m"  
            desiredVel.velocities.append(vel)
           
	    vel = JointValue()
            vel.joint_uri = "gripper_finger_joint_r"
            vel.unit = "m"  
            desiredVel.velocities.append(vel)

            joint_message = ''
            vel_message = ''
            grip_message = ''


            desiredVel.velocities[15].value -= r2_axis * 0.0115
            desiredVel.velocities[16].value -= r2_axis * 0.0115

            
            desiredGripPos.positions[15].value -= r2_axis * 0.0115
            desiredGripPos.positions[16].value = desiredGripPos.positions[15].value
            
	    vel_message += ('veloc ' + str(15) + ': ' + str(desiredVel.velocities[15].value) + '    ')	    
	    vel_message += ('veloc ' + str(15) + ': ' + str(desiredVel.velocities[16].value) + '    ')	    


           	
                        	
            #grip_message += ('grip ' + str(0) + ': ' + str(desiredGripPos.positions[15].value) + '    ')
	    #grip_message += ('grip ' + str(1) + ': ' + str(desiredGripPos.positions[16].value) + '    ')

	    #self.gripperPositions = desiredGripPos
            
            print(joint_message)
            print(vel_message)
            print(grip_message)

            #self.gripPub.publish(self.gripperPositions)
            self.velPub.publish(desiredVel)

    
    def processJoystick(self, joyMsg):
        self.joyMsg = joyMsg


def main(args):
    arm_teleop()
    #rospy.init_node('arm_teleop', anonymous=True)
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")

if __name__ == '__main__':
	main(sys.argv)
