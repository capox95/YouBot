#!/usr/bin/python

#import the necessary modules
import cv2
import numpy as np
import math

objp = np.array([[0, 0, 0],[1, 0, 0],[1, 1, 0],[1, 0, 0]], np.float32)

mtx = np.matrix([[532.80990766, 0.0, 342.49522241],
      [0.0, 532.93344824, 233.88792572],
      [0.0, 0.0, 1.0]], np.float32)

dist =  np.array([ -2.81325825e-01,   2.91151879e-02,   1.21234424e-03,  -1.40823842e-04, 1.54861064e-01], np.float32)



filename = 'square_3.png'
img = cv2.imread(filename)
gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
blur = cv2.GaussianBlur(gray,(5,5),0)
edges = cv2.Canny(blur,100,200)

ret,thresh = cv2.threshold(edges,127,255,0)
contours, hierarchy = cv2.findContours(thresh,cv2.RETR_TREE,cv2.CHAIN_APPROX_SIMPLE)
cnt = contours[0]
epsilon = 0.1 * cv2.arcLength(cnt, True)
approx = cv2.approxPolyDP(cnt, epsilon, True)
#print(approx)

p0 = approx[0][0] #where we calculate the angle
p1 = approx[3][0] #second corner of the square
p2 = ([p0[0]+1],[p0[1]]) #horizontal reference

dx1 = p1[0] - p0[0]
dy1 = p1[1] - p0[1]

dx2 = p2[0] - p0[0]
dy2 = p2[1] - p0[1]

x = (dx1*dx2 + dy1*dy2)/math.sqrt((dx1*dx1 + dy1*dy1)*(dx2*dx2 + dy2*dy2))
angle = math.acos(x)
print(angle)


#print(center)
#centerx = center[1]
#print(centerx)

cv2.circle(img, approx, 5, (255,0,0), -1)
cv2.imshow('approx', img)







if cv2.waitKey(0) & 0xff == 27:
    cv2.destroyAllWindows()
